{
  "name": "Agxmaster.GitHub.io",
  "tagline": "blog",
  "body": "## 类间关系\r\n\r\n### 依赖关系\r\n1.依赖和关联很像，但是不属于关联，他和关联的区别在于类与类直接没有关系，只是存在调用，比如学生登陆需要记一次日志。\r\n\r\n```php\r\n<?php\r\nclass Student{\r\n\r\n  //第一种方式\r\n  public function studentLoginLog(Log $log){\r\n      $log->studentLogin();\r\n  }\r\n\r\n  //第二种方式\r\n  public function studentLoginLog(){\r\n      Log::write();\r\n  }\r\n\r\n  //第三种\r\n  public function studentLoginLog(){\r\n      $log = new Log();\r\n      $log -> write();\r\n  }\r\n}\r\n```\r\n### 关联关系\r\n1.关联关系是一种在类中调用其它类的关系。<br>\r\n2.关联包括三种（关联、聚合、合成）。<br>\r\n3.关联关系可以是单向关联也可以是双向关联。\r\n4.一般用于两个类是平级有关联关系的类中。\r\n\r\n比如学生和老师就属于一种双向关联关系，学生有老师，老师有学生，同时学生和老师都可以脱离彼此单独存在。\r\n```php\r\n<?php\r\nclass Teacher{\r\n  private $student = null;\r\n\r\n  //第一种方式\r\n  public function __construct(Student $student){\r\n    $this->student = $student;\r\n  }\r\n\r\n  //第二种方式\r\n  public function setStudent(Student $student){\r\n    $this->student = $student;\r\n  }\r\n\r\n  //调用\r\n  public function getMyStudents(){\r\n    $this->student->getStudents();\r\n  }\r\n}\r\n```\r\n```php\r\n<?php\r\nclass Student{\r\n  private $teacher = null;\r\n\r\n  //第一种方式\r\n  public function __construct(Teacher $teacher){\r\n    $this->teacher = $teacher;\r\n  }\r\n\r\n  //第二种方式\r\n  public function setTeacher(Teacher $teacher){\r\n    $this->teacher = $teacher;\r\n  }\r\n\r\n  //调用\r\n  public function getMyTeacher(){\r\n    $this->teacher->getTeacher();\r\n  }\r\n}\r\n```\r\n### 聚合关系\r\n1.聚合用来表示类的从属关系，比如学生和课本，学生拥有课本，但是课本又不只是学生有老师也有，所以课本可以脱离学生存在。\r\n```php\r\n<?php\r\nclass Student{\r\n  private $book = null;\r\n\r\n  //第一种方式\r\n  public function __construct(Book $book){\r\n    $this->book = $book;\r\n  }\r\n\r\n  //第二种方式\r\n  public function setBook(Book $book){\r\n    $this->book = $book;\r\n  }\r\n\r\n  //调用\r\n  public function getMyBook(){\r\n    $this->teacher->getBook();\r\n  }\r\n}\r\n```\r\n### 组合关系\r\n1.组合是一种强关联关系，一个类不能脱离另一个类，比如学生和成绩。\r\n```php\r\n<?php\r\nclass Student{\r\n  private $grades = null;\r\n\r\n  //第一种方式\r\n  public function __construct(){\r\n    $this->grades =new Grades();\r\n  }\r\n\r\n  //第二种方式\r\n  public function setBook(){\r\n      $this->grades =new Grades();\r\n  }\r\n\r\n  //调用\r\n  public function getMyBook(){\r\n    $this->grades->getGrades();\r\n    //或者\r\n    (new Grades()) ->getGrades();\r\n  }\r\n}\r\n```\r\n### 泛化\r\n泛化就是继承子类拥有父类的所有属性方法，同事也可以复写他们。\r\n\r\n```php\r\n<?php\r\nclass User{\r\n\r\n  public function __construct(){}\r\n\r\n  public function getUserName(){\r\n      reutrn 'userName';\r\n  }\r\n}\r\n\r\nclass Student{\r\n  public function __construct(){}\r\n\r\n  public function getUserName(){\r\n    reutn 'studentName';\r\n  }\r\n}\r\n```\r\n### 实现\r\n接口是用于定义行为规范,实现接口的类必须完成接口的所有方法。\r\n\r\n```php\r\n<?php\r\ninterface class{\r\n    public function onClass();\r\n}\r\n\r\nclass Student implement class{\r\n  public function onClass(){\r\n    echo 'Student on class';\r\n  }\r\n}\r\n\r\nclass Teacher implement class{\r\n  public function onClass(){\r\n    echo 'Teacher on class';\r\n  }\r\n}\r\n```\r\n###强弱顺序\r\n实现 = 泛化 > 组合 > 聚合 > 关联 > 依赖\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}